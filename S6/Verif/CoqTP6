Require Import Arith.
Require Import Lia.
Require Export List.
Open Scope list_scope.
Import ListNotations.


(*Fixpoint c'est Definition pour recursion*)
(*EXO 1 *)

Inductive is_mem : nat -> list nat -> Prop :=
|is_mem_base : forall (e : nat) (l : list nat),
is_mem e (e::l)
|is_mem_cons : forall (e h : nat) (li : list nat),
is_mem e li -> is_mem e (h::li).

Goal is_mem 3 [8;9;7;2;1;3].
apply is_mem_cons.
apply is_mem_cons.
apply is_mem_cons.
apply is_mem_cons.
apply is_mem_cons.
apply is_mem_base.



Fixpoint mem (n : nat) (l : list nat) : bool :=
match l with
|[] => false
|h::t => match Nat.eq_dec h n with
  |left _ => true
  |_ => mem n t
  end
end.


Eval compute in mem 1 [8;9;7;2;1;3].

Lemma 
